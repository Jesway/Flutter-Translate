// Mocks generated by Mockito 5.4.4 from annotations
// in flutter_translate/test/src/flutter_translate_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i9;
import 'dart:ui' as _i8;

import 'package:flutter_translate/flutter_translate.dart' as _i2;
import 'package:flutter_translate/src/contexts/localization_context.dart'
    as _i11;
import 'package:flutter_translate/src/models/locale_data.dart' as _i4;
import 'package:flutter_translate/src/services/change_locale_service.dart'
    as _i15;
import 'package:flutter_translate/src/services/fallback_locale_service.dart'
    as _i6;
import 'package:flutter_translate/src/services/initial_locale_service.dart'
    as _i13;
import 'package:flutter_translate/src/services/loaders/base/localization_loader.dart'
    as _i3;
import 'package:flutter_translate/src/services/locale_persistence_service.dart'
    as _i7;
import 'package:flutter_translate/src/services/localization_service.dart'
    as _i5;
import 'package:flutter_translate/src/services/missing_localization_key_service.dart'
    as _i14;
import 'package:flutter_translate/src/services/supported_locale_service.dart'
    as _i16;
import 'package:flutter_translate/src/services/translation_service.dart'
    as _i10;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i12;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeFlutterTranslateOptions_0 extends _i1.SmartFake
    implements _i2.FlutterTranslateOptions {
  _FakeFlutterTranslateOptions_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeLocalizationLoader_1 extends _i1.SmartFake
    implements _i3.LocalizationLoader {
  _FakeLocalizationLoader_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeLocaleData_2 extends _i1.SmartFake implements _i4.LocaleData {
  _FakeLocaleData_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeLocalizationService_3 extends _i1.SmartFake
    implements _i5.LocalizationService {
  _FakeLocalizationService_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeFallbackLocaleService_4 extends _i1.SmartFake
    implements _i6.FallbackLocaleService {
  _FakeFallbackLocaleService_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeLocalePersistenceService_5 extends _i1.SmartFake
    implements _i7.LocalePersistenceService {
  _FakeLocalePersistenceService_5(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeLocale_6 extends _i1.SmartFake implements _i8.Locale {
  _FakeLocale_6(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [LocalizationLoader].
///
/// See the documentation for Mockito's code generation for more information.
class MockLocalizationLoader extends _i1.Mock
    implements _i3.LocalizationLoader {
  MockLocalizationLoader() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.FlutterTranslateOptions get options => (super.noSuchMethod(
        Invocation.getter(#options),
        returnValue: _FakeFlutterTranslateOptions_0(
          this,
          Invocation.getter(#options),
        ),
      ) as _i2.FlutterTranslateOptions);

  @override
  set options(_i2.FlutterTranslateOptions? _options) => super.noSuchMethod(
        Invocation.setter(
          #options,
          _options,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i9.Future<Map<String, dynamic>?> load(_i8.Locale? locale) =>
      (super.noSuchMethod(
        Invocation.method(
          #load,
          [locale],
        ),
        returnValue: _i9.Future<Map<String, dynamic>?>.value(),
      ) as _i9.Future<Map<String, dynamic>?>);
}

/// A class which mocks [TranslationService].
///
/// See the documentation for Mockito's code generation for more information.
class MockTranslationService extends _i1.Mock
    implements _i10.TranslationService {
  MockTranslationService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  void updateLocale(_i11.LocalizationContext? context) => super.noSuchMethod(
        Invocation.method(
          #updateLocale,
          [context],
        ),
        returnValueForMissingStub: null,
      );

  @override
  String translate(
    String? key, {
    Map<String, dynamic>? args,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #translate,
          [key],
          {#args: args},
        ),
        returnValue: _i12.dummyValue<String>(
          this,
          Invocation.method(
            #translate,
            [key],
            {#args: args},
          ),
        ),
      ) as String);

  @override
  String plural(
    String? key,
    num? value, {
    Map<String, dynamic>? args,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #plural,
          [
            key,
            value,
          ],
          {#args: args},
        ),
        returnValue: _i12.dummyValue<String>(
          this,
          Invocation.method(
            #plural,
            [
              key,
              value,
            ],
            {#args: args},
          ),
        ),
      ) as String);

  @override
  dynamic getValueAtKeyPath(
    String? keyPath, [
    dynamic localizations,
  ]) =>
      super.noSuchMethod(Invocation.method(
        #getValueAtKeyPath,
        [
          keyPath,
          localizations,
        ],
      ));
}

/// A class which mocks [LocalizationService].
///
/// See the documentation for Mockito's code generation for more information.
class MockLocalizationService extends _i1.Mock
    implements _i5.LocalizationService {
  MockLocalizationService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.LocalizationLoader get loader => (super.noSuchMethod(
        Invocation.getter(#loader),
        returnValue: _FakeLocalizationLoader_1(
          this,
          Invocation.getter(#loader),
        ),
      ) as _i3.LocalizationLoader);

  @override
  _i2.FlutterTranslateOptions get options => (super.noSuchMethod(
        Invocation.getter(#options),
        returnValue: _FakeFlutterTranslateOptions_0(
          this,
          Invocation.getter(#options),
        ),
      ) as _i2.FlutterTranslateOptions);

  @override
  bool containsLocale(_i8.Locale? locale) => (super.noSuchMethod(
        Invocation.method(
          #containsLocale,
          [locale],
        ),
        returnValue: false,
      ) as bool);

  @override
  _i9.Future<Map<String, dynamic>?> loadLocaleData(_i8.Locale? locale) =>
      (super.noSuchMethod(
        Invocation.method(
          #loadLocaleData,
          [locale],
        ),
        returnValue: _i9.Future<Map<String, dynamic>?>.value(),
      ) as _i9.Future<Map<String, dynamic>?>);
}

/// A class which mocks [FallbackLocaleService].
///
/// See the documentation for Mockito's code generation for more information.
class MockFallbackLocaleService extends _i1.Mock
    implements _i6.FallbackLocaleService {
  MockFallbackLocaleService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i9.Future<_i4.LocaleData> getFallbackLocaleData() => (super.noSuchMethod(
        Invocation.method(
          #getFallbackLocaleData,
          [],
        ),
        returnValue: _i9.Future<_i4.LocaleData>.value(_FakeLocaleData_2(
          this,
          Invocation.method(
            #getFallbackLocaleData,
            [],
          ),
        )),
      ) as _i9.Future<_i4.LocaleData>);

  @override
  _i9.Future<Map<String, dynamic>> loadFallbackLocaleData() =>
      (super.noSuchMethod(
        Invocation.method(
          #loadFallbackLocaleData,
          [],
        ),
        returnValue:
            _i9.Future<Map<String, dynamic>>.value(<String, dynamic>{}),
      ) as _i9.Future<Map<String, dynamic>>);
}

/// A class which mocks [InitialLocaleService].
///
/// See the documentation for Mockito's code generation for more information.
class MockInitialLocaleService extends _i1.Mock
    implements _i13.InitialLocaleService {
  MockInitialLocaleService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.FlutterTranslateOptions get options => (super.noSuchMethod(
        Invocation.getter(#options),
        returnValue: _FakeFlutterTranslateOptions_0(
          this,
          Invocation.getter(#options),
        ),
      ) as _i2.FlutterTranslateOptions);

  @override
  set options(_i2.FlutterTranslateOptions? _options) => super.noSuchMethod(
        Invocation.setter(
          #options,
          _options,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i5.LocalizationService get localizationService => (super.noSuchMethod(
        Invocation.getter(#localizationService),
        returnValue: _FakeLocalizationService_3(
          this,
          Invocation.getter(#localizationService),
        ),
      ) as _i5.LocalizationService);

  @override
  set localizationService(_i5.LocalizationService? _localizationService) =>
      super.noSuchMethod(
        Invocation.setter(
          #localizationService,
          _localizationService,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i6.FallbackLocaleService get fallbackLocaleService => (super.noSuchMethod(
        Invocation.getter(#fallbackLocaleService),
        returnValue: _FakeFallbackLocaleService_4(
          this,
          Invocation.getter(#fallbackLocaleService),
        ),
      ) as _i6.FallbackLocaleService);

  @override
  set fallbackLocaleService(
          _i6.FallbackLocaleService? _fallbackLocaleService) =>
      super.noSuchMethod(
        Invocation.setter(
          #fallbackLocaleService,
          _fallbackLocaleService,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i7.LocalePersistenceService get localePersistenceService =>
      (super.noSuchMethod(
        Invocation.getter(#localePersistenceService),
        returnValue: _FakeLocalePersistenceService_5(
          this,
          Invocation.getter(#localePersistenceService),
        ),
      ) as _i7.LocalePersistenceService);

  @override
  set localePersistenceService(
          _i7.LocalePersistenceService? _localePersistenceService) =>
      super.noSuchMethod(
        Invocation.setter(
          #localePersistenceService,
          _localePersistenceService,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i9.Future<_i8.Locale> getInitialLocale() => (super.noSuchMethod(
        Invocation.method(
          #getInitialLocale,
          [],
        ),
        returnValue: _i9.Future<_i8.Locale>.value(_FakeLocale_6(
          this,
          Invocation.method(
            #getInitialLocale,
            [],
          ),
        )),
      ) as _i9.Future<_i8.Locale>);
}

/// A class which mocks [MissingLocalizationKeyService].
///
/// See the documentation for Mockito's code generation for more information.
class MockMissingLocalizationKeyService extends _i1.Mock
    implements _i14.MissingLocalizationKeyService {
  MockMissingLocalizationKeyService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.FallbackLocaleService get fallbackLocaleService => (super.noSuchMethod(
        Invocation.getter(#fallbackLocaleService),
        returnValue: _FakeFallbackLocaleService_4(
          this,
          Invocation.getter(#fallbackLocaleService),
        ),
      ) as _i6.FallbackLocaleService);

  @override
  set fallbackLocaleService(
          _i6.FallbackLocaleService? _fallbackLocaleService) =>
      super.noSuchMethod(
        Invocation.setter(
          #fallbackLocaleService,
          _fallbackLocaleService,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i2.FlutterTranslateOptions get options => (super.noSuchMethod(
        Invocation.getter(#options),
        returnValue: _FakeFlutterTranslateOptions_0(
          this,
          Invocation.getter(#options),
        ),
      ) as _i2.FlutterTranslateOptions);

  @override
  set options(_i2.FlutterTranslateOptions? _options) => super.noSuchMethod(
        Invocation.setter(
          #options,
          _options,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i9.Future<dynamic> initialize() => (super.noSuchMethod(
        Invocation.method(
          #initialize,
          [],
        ),
        returnValue: _i9.Future<dynamic>.value(),
      ) as _i9.Future<dynamic>);
}

/// A class which mocks [ChangeLocaleService].
///
/// See the documentation for Mockito's code generation for more information.
class MockChangeLocaleService extends _i1.Mock
    implements _i15.ChangeLocaleService {
  MockChangeLocaleService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i9.Future<dynamic> changeLocale(_i8.Locale? newLocale) =>
      (super.noSuchMethod(
        Invocation.method(
          #changeLocale,
          [newLocale],
        ),
        returnValue: _i9.Future<dynamic>.value(),
      ) as _i9.Future<dynamic>);

  @override
  _i9.Future<_i4.LocaleData?> getNewLocaleData(_i8.Locale? locale) =>
      (super.noSuchMethod(
        Invocation.method(
          #getNewLocaleData,
          [locale],
        ),
        returnValue: _i9.Future<_i4.LocaleData?>.value(),
      ) as _i9.Future<_i4.LocaleData?>);
}

/// A class which mocks [LocalePersistenceService].
///
/// See the documentation for Mockito's code generation for more information.
class MockLocalePersistenceService extends _i1.Mock
    implements _i7.LocalePersistenceService {
  MockLocalePersistenceService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i9.Future<_i8.Locale?> getPreferredLocale() => (super.noSuchMethod(
        Invocation.method(
          #getPreferredLocale,
          [],
        ),
        returnValue: _i9.Future<_i8.Locale?>.value(),
      ) as _i9.Future<_i8.Locale?>);

  @override
  _i9.Future<dynamic> savePreferredLocale(_i8.Locale? locale) =>
      (super.noSuchMethod(
        Invocation.method(
          #savePreferredLocale,
          [locale],
        ),
        returnValue: _i9.Future<dynamic>.value(),
      ) as _i9.Future<dynamic>);
}

/// A class which mocks [SupportedLocaleService].
///
/// See the documentation for Mockito's code generation for more information.
class MockSupportedLocaleService extends _i1.Mock
    implements _i16.SupportedLocaleService {
  MockSupportedLocaleService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.Locale getSupportedLocale(_i8.Locale? locale) => (super.noSuchMethod(
        Invocation.method(
          #getSupportedLocale,
          [locale],
        ),
        returnValue: _FakeLocale_6(
          this,
          Invocation.method(
            #getSupportedLocale,
            [locale],
          ),
        ),
      ) as _i8.Locale);
}
